import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

import sys
sys.path.append('/projectnb/bu-disks/connorr/code/EDGE/MODULES/')
sys.path.append('/projectnb/bu-disks/connorr/burst/code/')
import EDGE as edge
import connector as con

import numpy as np
import pdb
from glob import glob

from astropy.io import ascii, fits
import pickle
from astropy.table import Table

'''
create_obj_template.py

PURPOSE:
    Template for phase 4: Creating trial objects from finished simulations/models and gets Q and M. This code will be generated by p3

AUTHHOR:
    Connor Robinson, June 19th, 2019
'''

model = 'test'
wttsname = 'twa7'

#Set up paths
pathfile = '/path/to/pathfile.dat'
tablefile = '/Users/Connor/Dropbox/Research/burst/sims/test/tablefile.dat'
shockparamfile = '/Users/Connor/Dropbox/Research/burst/sims/test/test/models/test/test_shock_params.dat'
modelpath = '/Users/Connor/Dropbox/Research/burst/sims/test/models/test/'
figpath = '/path/to/figures/'
p4path = '/path/to/p4/directory/'

phi0 = 0.0
alpha = 5
incs = [0,10,20,30,40,50,60,70,80,90]
pt = 0.2
ell_q = 0.3
ell_m = 4/24 
nzeros = 4
fracerr = 0.005

#Load in the wtts -- IF NOT USING EDGE, WILL NEED TO MODIFY THIS
#Read in path file
path = ascii.read(pathfile)
wttspath = path['wttspath'][0]
wtts = edge.loadObs(wttsname, datapath = wttspath)
wtts_wl = wtts.spectra['HST']['wl']
wtts_flux = wtts.spectra['HST']['lFl']

#No longer need to modify below here
####################################
wttsparamfile = path['wttspath'][0]+'stellar_params.dat'
wtable = ascii.read(wttsparamfile)

objname = model+'.pkl'
QMname = model+'_QM.dat'

#Grab the job numbers
jobnames = glob(modelpath+model+'_'+'?'*nzeros+'.fits')
jobs = np.sort(np.array([int(j[-(5+nzeros):-5]) for j in jobnames]))

wtable = ascii.read(wttsparamfile)
rwtts = wtable[wtable['objs'] == wttsname]['radius'][0]
dwtts = wtable[wtable['objs'] == wttsname]['dist'][0]

#Create the object
print('Creating Object')
obj = con.trial(jobs, model, modelpath, tablefile, shockparamfile, nzeros)
print('Adding photosphere')
obj.addPhot(wttsname, wtts_wl, wtts_flux, rwtts, dwtts)

iQM = []
lcs = {}

for inc in incs:
    name = model+'_i'+str(inc)
    incname = 'i'+str(inc)
    
    print('Adding spot')
    obj.addSpot(inc, alpha, phi0, incname, gamma = None)
    print('Making Spectra')
    obj.makeSpec(incname)
    print('Making photometry')
    obj.makePhot(incname, 'kepler', basepath = path['filters'][0])
    
    raw = obj.spot[incname]['keplerphot']
    
    t = obj.time.flatten()
    lc = raw + np.random.normal(scale = fracerr * np.median(raw), size = len(raw))
    err = fracerr * np.median(lc)
    
    lcs[incname] = {'lc':lc, 't':t, 'err':err, 'model':model}
    
    Q = con.getQ(t, lc, err, pt = pt, ell = ell_q, tau = 1, showplot = False, plotname = figpath+name+'_Q.pdf', gauss = True)
    M = con.getM(t, lc, ell_m, err, tau = 1, showplot = False, plotname = figpath+name+'_M.pdf', percentile = 5)
    
    #Add Q and M to the object
    obj.spot[incname]['Q'] = Q
    obj.spot[incname]['M'] = M
    
    iQM.append([inc, Q, M])

iQM = np.array(iQM)

#Write out Q and M
QMtab = Table(iQM, names = ['inc', 'Q', 'M'])
ascii.write(iQM, p4path+QMname)

#Save the object as a pickle file
pickle.dump(obj, open(p4path+objname, 'wb'))


